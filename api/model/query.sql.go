// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package model

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  name, description, product_status, created_at, updated_at, reserved_at
) VALUES (
  ?, ?, ?, ?, ?, ?
)
RETURNING id, name, description, product_status, created_at, updated_at, reserved_at
`

type CreateProductParams struct {
	Name          sql.NullString `json:"name"`
	Description   sql.NullString `json:"description"`
	ProductStatus sql.NullString `json:"product_status"`
	CreatedAt     int64          `json:"created_at"`
	UpdatedAt     int64          `json:"updated_at"`
	ReservedAt    sql.NullInt64  `json:"reserved_at"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (*Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.ProductStatus,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ReservedAt,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ProductStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ReservedAt,
	)
	return &i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = ?
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, description, product_status, created_at, updated_at, reserved_at FROM products
WHERE id = ? LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int64) (*Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ProductStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ReservedAt,
	)
	return &i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, description, product_status, created_at, updated_at, reserved_at FROM products
ORDER BY id
`

func (q *Queries) ListProducts(ctx context.Context) ([]*Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ProductStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ReservedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products
SET
  name = ?,
  description = ?,
  product_status = ?,
  created_at = ?,
  updated_at = ?,
  reserved_at = ?
WHERE id = ?
`

type UpdateProductParams struct {
	Name          sql.NullString `json:"name"`
	Description   sql.NullString `json:"description"`
	ProductStatus sql.NullString `json:"product_status"`
	CreatedAt     int64          `json:"created_at"`
	UpdatedAt     int64          `json:"updated_at"`
	ReservedAt    sql.NullInt64  `json:"reserved_at"`
	ID            int64          `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.ExecContext(ctx, updateProduct,
		arg.Name,
		arg.Description,
		arg.ProductStatus,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ReservedAt,
		arg.ID,
	)
	return err
}
