// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: shop/v1/shop.proto

package shopv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/syumai/shop.syum.ai/api/gen/shop/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ShopServiceName is the fully-qualified name of the ShopService service.
	ShopServiceName = "shop.v1.ShopService"
)

// ShopServiceClient is a client for the shop.v1.ShopService service.
type ShopServiceClient interface {
	Echo(context.Context, *connect_go.Request[v1.EchoRequest]) (*connect_go.Response[v1.EchoResponse], error)
}

// NewShopServiceClient constructs a client for the shop.v1.ShopService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewShopServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ShopServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &shopServiceClient{
		echo: connect_go.NewClient[v1.EchoRequest, v1.EchoResponse](
			httpClient,
			baseURL+"/shop.v1.ShopService/Echo",
			opts...,
		),
	}
}

// shopServiceClient implements ShopServiceClient.
type shopServiceClient struct {
	echo *connect_go.Client[v1.EchoRequest, v1.EchoResponse]
}

// Echo calls shop.v1.ShopService.Echo.
func (c *shopServiceClient) Echo(ctx context.Context, req *connect_go.Request[v1.EchoRequest]) (*connect_go.Response[v1.EchoResponse], error) {
	return c.echo.CallUnary(ctx, req)
}

// ShopServiceHandler is an implementation of the shop.v1.ShopService service.
type ShopServiceHandler interface {
	Echo(context.Context, *connect_go.Request[v1.EchoRequest]) (*connect_go.Response[v1.EchoResponse], error)
}

// NewShopServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewShopServiceHandler(svc ShopServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/shop.v1.ShopService/Echo", connect_go.NewUnaryHandler(
		"/shop.v1.ShopService/Echo",
		svc.Echo,
		opts...,
	))
	return "/shop.v1.ShopService/", mux
}

// UnimplementedShopServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedShopServiceHandler struct{}

func (UnimplementedShopServiceHandler) Echo(context.Context, *connect_go.Request[v1.EchoRequest]) (*connect_go.Response[v1.EchoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("shop.v1.ShopService.Echo is not implemented"))
}
